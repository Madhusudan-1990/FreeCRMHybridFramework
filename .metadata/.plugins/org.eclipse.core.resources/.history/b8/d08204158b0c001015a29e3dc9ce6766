package com.qa.crm.tests;
import java.io.IOException;

import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.openqa.selenium.By;
import org.testng.Assert;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;
import com.qa.crm.base.BaseTest;
public class ContactsPageTest extends BaseTest
{
	@BeforeClass
	public void homeSetup()
	{
		homePage = loginPage.doLogin(prop.getProperty("username"),prop.getProperty("password"));
		contactPage = homePage.navigateToContactPage();
	}
	
	@Test(priority = 1)
	public void verifyContactsPageLabelTest()
	{
		boolean flag = contactPage.verifyContactsLabel();
		Assert.assertTrue(flag,"Failed to verify Contacts Page !!!");
		
	}
	
	@DataProvider
	public Object getCRMTestData() 
	{
		return new Object[][]
				{
					{"Joe","Simon","Amazon"},
					{"Bret","Lee","Flipkart"},
					{"Andy","Flower","Google"}
				};
	}
	
	@Test(priority = 2,dataProvider = "getCRMTestData")
	public void createNewContact(String fName, String lName, String company) throws InterruptedException
	{
		contactPage.createNewContact(fName, lName, company);
		contactPage.navigateToContactPage();
		
		
	}
	
//	@Test(priority = 3)
//	public void returnBackToHomePageTest()
//	{
//		homePage = contactPage.returnBackToHomePage();
//	}
	@DataProvider
	public Object[][] getSearchKey()
	{
		return new Object[][]
				{
					{"TOM",9},
					{"David",4},
					{"Mukta",5}
				};
	}
	
	@Test(priority = 4,dataProvider = "getSearchKey")
	public void searchCountTest(String searchKey,int searchCount)
	{
		contactPage = homePage.doSearch(searchKey);
		Assert.assertEquals(contactPage.getResultsSearchCount(),searchCount);
	}
	@DataProvider
	public Object[][] getSearchData()
	{
		return new Object[][]
				{
					{"TOM","TOM CRUISE"},
					{"David","David Cris"},
					{"Mukta","Mukta Sharma"}
				};
	}
	@Test(priority = 5,dataProvider = "getSearchData")
	public void searchTest(String searchKey, String searchValue)
	{
		contactPage = homePage.doSearch(searchKey);
		personDetailPage = contactPage.selectContact(searchValue); 
		Assert.assertEquals(personDetailPage.getPersonHeader(), searchValue);
		
	}
}
