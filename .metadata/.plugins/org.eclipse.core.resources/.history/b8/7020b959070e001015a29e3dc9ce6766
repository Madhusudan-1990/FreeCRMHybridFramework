package com.qa.crm.factory;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Properties;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.safari.SafariDriver;

import com.qa.crm.errors.AppError;
import com.qa.crm.exceptions.BrowserException;
import com.qa.crm.exceptions.*;
import io.github.bonigarcia.wdm.WebDriverManager;

public class DriverFactory 
{
	/**
	 * This method is used to init the driver on the basis of given browsername.
	 * @param browserName
	 * @return it returns driver
	 */
	WebDriver driver;
	Properties prop;
	public WebDriver initDriver(Properties prop)
	{
		String browserName = prop.getProperty("browser");
		System.out.println("Browser Name : "+browserName);
		switch(browserName.toLowerCase().trim())
		{
		case "chrome":
			WebDriverManager.chromedriver().setup();
			driver = new ChromeDriver();
			break;
		case "firefox":
			WebDriverManager.firefoxdriver().setup();
			driver = new FirefoxDriver();
			break;
		case "safari":
			WebDriverManager.safaridriver().setup();
			driver = new SafariDriver();
			break;
		case "ie":
			WebDriverManager.iedriver().setup();
			driver = new InternetExplorerDriver();
			break;		
		case "edge":
			WebDriverManager.edgedriver().setup();
			driver = new EdgeDriver();
			break;	
			
		default:
			System.out.println(AppError.INVALID_BROWSER_MSG + browserName + "is invalid browser");
			throw new BrowserException(AppError.INVALID_BROWSER_MSG + browserName);	

		}
		driver.manage().window().maximize();
		driver.manage().deleteAllCookies();
		driver.get(prop.getProperty("url"));
		return driver;
	}
	
	/**
	 * This method is used to initialize the property from the config file.
	 * @return
	 */
	public Properties initProp()
	{
		prop = new Properties();
		FileInputStream fis = null;
		
		String envName = System.getProperty("env");
		System.out.println("Running tests on env : " +envName);
		try {
		if(envName==null)
		{
			
				fis = new FileInputStream("./src/test/resources/config/config.properties");
		}
		else
		{
			switch(envName)
			{
			case "qa":
				fis = new FileInputStream("./src/test/resources/config/qa.config.properties");
				break;
			case "dev":
				fis = new FileInputStream("./src/test/resources/config/dev.config.properties");
				break;
			case "stage":
				fis = new FileInputStream("./src/test/resources/config/stage.config.properties");
				break;
			case "uat":
				fis = new FileInputStream("./src/test/resources/config/uat.config.properties");
				break;
			case "prod":
				fis = new FileInputStream("./src/test/resources/config/config.properties");
				break;
				default:
					System.out.println("Please provide valid env name..." +envName);
					throw new FrameworkException("INVALID ENV NAME");
			}
		}
		 catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return prop;
	}
}
